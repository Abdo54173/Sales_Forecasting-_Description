# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UAuOlHIwt8KI9jFt8JmInK9z3Zp4KOz0
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
from google.colab import files

uploaded =files.upload()

!unzip archive.zip -d /content/

train_data =pd.read_csv('/content/train.csv')

train_data.head()

train_data['Date'] =pd.to_datetime(train_data['Date'])

train_data['Dept'].nunique()

train_data.info()

feature_data =pd.read_csv('/content/features.csv')

feature_data.head()

feature_data['Date'] =pd.to_datetime(feature_data['Date'])

feature_data.info()

stores_data =pd.read_csv('/content/stores.csv')

stores_data.head()

stores_data['Type'].nunique()

stores_data.info()

train_data['Weekly_Sales'].describe()

# merge between train_data , feature data

train_feature =pd.merge(train_data ,feature_data ,on=['Store','Date'],how='left')
train_feature.head()

final_df =pd.merge(train_feature ,stores_data ,on='Store',how='left')

final_df.head()

final_df.info()

markdown_cols = ['MarkDown1', 'MarkDown2', 'MarkDown3', 'MarkDown4', 'MarkDown5']
final_df[markdown_cols] =final_df[markdown_cols].fillna(0)
final_df[markdown_cols].isnull().sum()

final_df['Year'] = final_df['Date'].dt.year
final_df['Month'] = final_df['Date'].dt.month
final_df['Week'] = final_df['Date'].dt.isocalendar().week
final_df['DayOfWeek'] = final_df['Date'].dt.dayofweek

final_df[['Date', 'Year', 'Month', 'Week', 'DayOfWeek']].head()

final_df.info()

final_df['Weekly_Sales_lag1'] = final_df.groupby(['Store', 'Dept'])['Weekly_Sales'].shift(1)

final_df['Weekly_Sales_lag2'] = final_df.groupby(['Store', 'Dept'])['Weekly_Sales'].shift(2)

final_df[['Weekly_Sales_lag1','Weekly_Sales_lag2']] = final_df[['Weekly_Sales_lag1','Weekly_Sales_lag2']].fillna(0)

final_df.info()

final_df['IsHoliday'] =final_df['IsHoliday_x'].astype(int)
final_df = final_df.drop(['IsHoliday_x','IsHoliday_y'], axis=1)

final_df = pd.get_dummies(final_df, columns=['Type'], drop_first=True)

final_df.info()

final_df = final_df.sort_values(by=['Store', 'Dept', 'Date'])

train_data = final_df[final_df['Year'] < 2012]
test_data = final_df[final_df['Year'] == 2012]

feature_cols = ['Temperature','Fuel_Price','MarkDown1','MarkDown2','MarkDown3',
                'MarkDown4','MarkDown5','CPI','Unemployment','Size','Year','Month',
                'Week','DayOfWeek','Weekly_Sales_lag1','Weekly_Sales_lag2','IsHoliday',
                'Type_B','Type_C']

X_train = train_data[feature_cols]
y_train = train_data['Weekly_Sales']

X_test = test_data[feature_cols]
y_test = test_data['Weekly_Sales']

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

model =LinearRegression()
model.fit(X_train , y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"RMSE: {rmse}")
print(f"MAE: {mae}")
print(f"R2 Score: {r2}")

import xgboost as xgb
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

xgb_model = xgb.XGBRegressor(
    objective='reg:squarederror',  # Regression
    n_estimators=500,
    learning_rate=0.05,
    max_depth=6,
    subsample=0.8,
    colsample_bytree=0.8,
    random_state=42
)

xgb_model.fit(
    X_train, y_train,
    eval_set=[(X_train, y_train), (X_test, y_test)],
    verbose=50
)

y_pred_xgb = xgb_model.predict(X_test)
mse = mean_squared_error(y_test, y_pred_xgb)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test, y_pred_xgb)
r2 = r2_score(y_test, y_pred_xgb)

print(f"XGBoost - RMSE: {rmse}, MAE: {mae}, R2: {r2}")

store = 1
dept = 1
mask = (test_data['Store']==store) & (test_data['Dept']==dept)

plt.figure(figsize=(12,5))
plt.plot(test_data.loc[mask,'Date'], y_test[mask], label='Actual', color='blue')
plt.plot(test_data.loc[mask,'Date'], y_pred[mask], label='Predicted', color='red')
plt.title(f'Store {store} Dept {dept}: Actual vs Predicted')
plt.xlabel('Date')
plt.ylabel('Weekly Sales')
plt.legend()
plt.show()